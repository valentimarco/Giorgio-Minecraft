// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package gen

import (
	"context"

	ulid "github.com/oklog/ulid/v2"
)

const createServer = `-- name: CreateServer :one
INSERT INTO servers(
  type,name,memory,max_player,aika_flag
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, type, memory, max_player, aika_flag
`

type CreateServerParams struct {
	Type      string
	Name      string
	Memory    int32
	MaxPlayer int32
	AikaFlag  bool
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, createServer,
		arg.Type,
		arg.Name,
		arg.Memory,
		arg.MaxPlayer,
		arg.AikaFlag,
	)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Memory,
		&i.MaxPlayer,
		&i.AikaFlag,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password
) VALUES (
  $1, $2
)
RETURNING id, username, password
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const existUser = `-- name: ExistUser :one
SELECT EXISTS(select id, username, password from users)
`

func (q *Queries) ExistUser(ctx context.Context) (bool, error) {
	row := q.db.QueryRow(ctx, existUser)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, password FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServerByID = `-- name: GetServerByID :one
SELECT id, name, type, memory, max_player, aika_flag FROM servers
WHERE id = $1
`

func (q *Queries) GetServerByID(ctx context.Context, id ulid.ULID) (Server, error) {
	row := q.db.QueryRow(ctx, getServerByID, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Memory,
		&i.MaxPlayer,
		&i.AikaFlag,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, password FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id ulid.ULID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}
